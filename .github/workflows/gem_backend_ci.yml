# A descriptive name for your workflow. This will appear in the GitHub Actions tab.
name: Laravel Backend Tests

# Define when this workflow should run.
on:
  push:
    # This workflow will only run when a push event occurs on the 'main' branch.
    branches: [ main ]
    # The 'paths' keyword ensures the workflow only runs if files in the backend/
    # directory are modified.
    paths:
      - 'backend/**'
  pull_request:
    # This workflow will also run when a pull request is created or updated
    # against the 'main' branch.
    branches: [ main ]
    paths:
      - 'backend/**'

# A workflow is made up of one or more jobs.
jobs:
  # This job will run the Laravel tests.
  laravel-tests:
    # The runner to use for this job. 'ubuntu-latest' is a solid, free choice.
    runs-on: ubuntu-latest

    # GitHub Actions can provision services like databases.
    services:
      # We'll set up a MySQL service for any tests that require a database.
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    # Define the steps for this job.
    steps:
      # Step 1: Check out your repository code.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up PHP and its extensions.
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3' # Make sure this matches your Laravel project's PHP version.
          extensions: dom, curl, libxml, mbstring, zip, pdo, mysql
          ini-values: post_max_size=256M, upload_max_filesize=256M
          tools: composer:v2, phpunit

      # --- DEBUGGING STEPS START HERE ---

      # Step 3: Display PHP version and loaded extensions for debugging.
      - name: Show PHP Info
        run: |
          echo "--- PHP Version ---"
          php -v
          echo "--- Loaded Extensions ---"
          php -m

      # Step 4: Install PHP dependencies using Composer in the backend directory.
      - name: Install PHP Dependencies
        run: composer install --no-progress --no-suggest
        working-directory: ./backend

      # Step 5: Prepare the Laravel application for testing.
      - name: Prepare Laravel Environment
        run: |
          cp .env.example .env
          php artisan key:generate
        working-directory: ./backend

      # Step 6: Debug the .env file contents. Note that secrets will be masked by GitHub.
      - name: Show Environment File
        run: cat .env
        working-directory: ./backend

      # Step 7: Run migrations and show the database tables.
      - name: Run Migrations and Debug DB
        run: |
          php artisan migrate --force
          mysql -u root -proot laravel -e "SHOW TABLES;"
        working-directory: ./backend
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: laravel
          DB_USERNAME: root
          DB_PASSWORD: root

      # --- DEBUGGING STEPS END HERE ---

      # Step 8: Run the Laravel tests with the --stop-on-failure flag.
      # This will stop the test suite at the first failed test, making it easier to debug.
      - name: Run Laravel Tests
        run: php artisan test --stop-on-failure
        working-directory: ./backend
